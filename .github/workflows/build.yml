name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly performance regression check

jobs:
  build-matrix:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64, arm64]
        compiler: [gcc, clang]
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            arch: arm64
          - os: macos-latest
            arch: arm64
            compiler: gcc
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # For performance history
    
    - name: Setup Build Environment (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y nasm gcc-multilib g++-multilib
        sudo apt-get install -y clang llvm lld
        sudo apt-get install -y valgrind perf-tools-unstable
        sudo apt-get install -y python3-dev python3-pip
        # For cross-compilation
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi
    
    - name: Setup Build Environment (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install nasm yasm
        brew install llvm
        brew install python@3.11
        # Performance tools
        brew install hyperfine
    
    - name: Setup Build Environment (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install nasm yasm
        choco install llvm
        choco install python
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Cache Build Artifacts
      uses: actions/cache@v3
      with:
        path: |
          build/
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-${{ matrix.arch }}-${{ matrix.compiler }}-${{ hashFiles('**/Makefile') }}
    
    - name: Configure Build
      run: |
        echo "CC=${{ matrix.compiler }}" >> $GITHUB_ENV
        echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
        echo "NANOCORE_BUILD_TYPE=release" >> $GITHUB_ENV
        echo "NANOCORE_ENABLE_LTO=1" >> $GITHUB_ENV
        echo "NANOCORE_ENABLE_PGO=1" >> $GITHUB_ENV
    
    - name: Build Core VM
      run: |
        make clean
        make vm PLATFORM=${{ runner.os }} ARCH=${{ matrix.arch }} CC=${{ matrix.compiler }}
    
    - name: Build Language Bindings
      run: |
        make bindings PLATFORM=${{ runner.os }} ARCH=${{ matrix.arch }}
    
    - name: Run ISA Compliance Tests
      run: |
        make test-isa
    
    - name: Run Unit Tests
      run: |
        make test-unit
    
    - name: Run Integration Tests
      run: |
        make test-integration
    
    - name: Memory Leak Check (Linux)
      if: runner.os == 'Linux' && matrix.compiler == 'gcc'
      run: |
        make test-valgrind
    
    - name: Performance Benchmarks
      run: |
        make benchmarks
        # Store results for regression tracking
        mkdir -p perf-results
        cp build/benchmarks/*.json perf-results/
    
    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: perf-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.compiler }}
        path: perf-results/
    
    - name: Security Audit
      run: |
        make test-security
    
    - name: Build Documentation
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc'
      run: |
        make docs

  performance-regression:
    needs: build-matrix
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download Performance Results
      uses: actions/download-artifact@v3
      with:
        path: perf-artifacts/
    
    - name: Analyze Performance Regression
      run: |
        python3 scripts/analyze_performance.py perf-artifacts/
    
    - name: Comment PR with Performance Impact
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const perfReport = fs.readFileSync('perf-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: perfReport
          });

  coverage:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y nasm gcc lcov
    
    - name: Build with Coverage
      run: |
        make clean
        make coverage
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-nanocore

  release:
    needs: [build-matrix, performance-regression]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Release Artifacts
      run: |
        make release-all
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/nanocore-*
          docs/nanocore-manual.pdf
        draft: false
        prerelease: false